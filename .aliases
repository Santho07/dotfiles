#!/bin/bash

# SHELL

# Measure zsh starting time
shelltime() {
  shell=${1-$SHELL} # Take an arguments or default
  for i in $(seq 1 10); do time $shell -i -c exit; done
}

# Reload the shell (i.e. invoke as a login shell)
alias reload="exec ${SHELL} -l"
alias sz="source ~/.zshrc"


alias nano="nvim"

# CD

alias ..="cd .."
alias ...="cd ../.."
alias ....="cd ../../.."
alias .....="cd ../../../.."
alias -- -="cd -"

# Create a new directory and enter it
function mcd() {
  mkdir -p "$@" && cd "$@"
}

# Shortcuts
alias doc="cd ~/Documents"
alias dod="cd ~/Downloads"
alias desk="cd ~/Desktop"
alias pic="cd ~/Pictures"
alias proj="cd ~/Projects"


# Process IDs occupying port 3000
alias tcp='lsof -wni tcp:3000'

# GNU

alias ls='exa --icons'
# alias cat='batcat'
alias preview="fzf --preview 'batcat --color \"always\" {}'"
alias up='sudo apt update -y && sudo apt upgrade -y'



# RAILS

# Check if the file exist, check if the process exist with the PID, then kill rails server
alias killr='PID=tmp/pids/server.pid && test -f $PID && ps -p $(cat $PID) > /dev/null && kill -9 $(cat $PID) && echo kill rs success'
alias rdsr='rails db:seed:replant'
alias rdm='RAILS_ENV=development rails db:migrate'
alias rtdm='RAILS_ENV=test rails db:migrate'
alias rdcms='RAILS_ENV=development rake db:drop db:create db:migrate db:seed'


# ZINIT

alias zu='zinit update'
alias zd='zinit delete'
alias zup='zinit update --parallel'

# Brew

alias bs='brew services'
alias bsl='brew services list'
alias bss='brew services star'
alias bsq='brew services stop'

# POSTGRES

alias pgstart='brew services start postgresql'
alias pgstatus='brew services list'
alias pgstop='brew services stop postgresql'


# MySQL

alias mqstart='brew services start mysql@5.7'
alias mqstatus='brew services list'
alias mqstop='brew services stop mysql@5.7'
alias mysql='mysql -u root' # mysql root user without password

# Redis

alias rdstart='brew services start redis'
alias rdstatus='brew services list'
alias rdstop='brew services stop redis'

# ALIASES

alias ta='tmux attach -t'
alias tad='tmux attach -d -t'
alias ts='tmux new-session -s'
alias tl='tmux list-sessions'
alias tksv='tmux kill-server'
alias tkss='tmux kill-session -t'

# Dotfiles bare git repo shortcut

alias j='/usr/bin/git --git-dir=$HOME/.dotfiles/ --work-tree=$HOME'
alias jc='j commit --verbose'
alias jcm='j commit --verbose -m'
alias jp='j push'
alias js='j status'
alias jst='j status'
alias jat='j add -u'        # Stage all updates of tracked files
alias jlo='j log --oneline'

# Git

alias gitpc='git config --global user.email imam.swe@gmail.com; git config --global user.name "Imam Hossain";'
alias gitwc='git config --local user.email imam.hossain@welldev.io; git config --local user.name "Imam Hossain";'

alias g='git'
alias gs='git status'
alias gst='git status'

alias ga='git add'
alias gaa='git add .'		                                               # Stage all changes
alias gat='git add -u'			                                           # Stage all changes of tracked files only

alias gb='git branch'
alias gbr='git branch -r'
alias gba='git branch -a'
alias gbd='git branch --delete'
alias gbdd='git branch --delete --force'

alias gc='git commit --verbose'
alias gcm='git commit --verbose -m'
alias gcam='git commit --verbose --amend -m'                                     # add changes and modify last commit message
alias gcaf='git commit --amend --no-edit'                               # add changes to last commit without edit
alias gcem='git commit --allow-empty -m'


alias gcc='git clean -df && git checkout -- .'                         # delete unstaged files and discard all unstage changes
alias gco='git checkout'

alias gcp='git cherry-pick'
alias gcpc='git cherry-pick --continue'
alias gcpa='git cherry-pick --abort'

alias grv='git revert'
alias grva='git revert --abort'
alias grvm='git revert -m'

alias gd='git diff'
alias gdd='git diff develop'
alias gdm='git diff master'
alias gdc='git diff --cached'
alias gdcs='git diff --cached --stat'
alias gds='git diff --staged'
alias gdh='git diff HEAD'

alias gf='git fetch'
alias gfa='git fetch --all'
alias gfp='git fetch --prune'

alias gg='git grep'
alias ggn='git grep -n'

alias gl='git log'
alias glp='git log --patch'
alias glo='git log --oneline'
alias glg='git log --graph --color --decorate --oneline'

alias glsf='git ls-files'

alias gp='git push'
alias gpf='git push -f'
alias gpd='git push --delete'
alias gpsu='git push --set-upstream'

alias gu='git pull'
alias gur='git pull --rebase --autostash'
alias gum='git pull --no-rebase'

alias gm='git merge'
alias gma='git merge --abort'

alias grb='git rebase'
alias grbi='git rebase --interactive'
alias grbc='git rebase --continue'
alias grbs='git rebase --skip'
alias grba='git rebase --abort'

alias gre='git remote'
alias grel='git remote list'
alias gres='git remote show'

alias grs='git reset --soft'
alias grs1='git reset --soft HEAD~1' # soft reset last commit
alias grh='git reset --hard'
alias grh1='git reset --hard HEAD~1' # hard reset last commit

alias grfl='git reflog'

alias gn='git notes'
alias gna='git notes add'
alias gne='git notes edit'
alias gnr='git notes remove'

alias gsh='git show'

alias gsm='git submodule'
alias gsma='git submodule add'
alias gsms='git submodule status'
alias gsmi='git submodule init'
alias gsmd='git submodule deinit'
alias gsmu='git submodule update'
alias gsmui='git submodule update --init --recursive'
alias gsmf='git submodule foreach'
alias gsmy='git submodule sync'

alias gsta='git stash apply'
alias gstp='git stash pop'
alias gstd='git stash drop'
alias gstl='git stash list'
alias gsts='git stash save'
alias gstsu='git stash save --include-untracked'
alias gstsp='git stash save --patch'
alias gitsh='git stash show'
alias gstsht='git stash show --text'
alias gstshs='git stash show --stat'


alias gitskip='git update-index --skip-worktree'
alias gitnoskip='git update-index --no-skip-worktree'

# copy branch name - to clipboard
alias gcpbn="git branch | grep '^\*' | cut -d' ' -f2 | pbcopy"          # copy the name of the current branch

# copy last commit id - to clipboard
alias gcpli='git log -1 --format="%h" | pbcopy | echo copied `git log -1 --format="%h"`'

# git search and replace, original_text = $1, replace_text=$2
function gsed(){
 git grep -l \$1 | xargs sed '' -e "s/\$1/\$2/g"
}

gdiff() {
  preview="git diff $@ --color=always -- {-1} | delta --line-numbers"
  git diff $@ --name-only | fzf -m --ansi --preview $preview
}


# git commit browser. needs fzf
glog() {
  git log --graph --color=always \
      --format="%C(auto)%h%d %s %C(black)%C(bold)%cr" "$@" |
  fzf --ansi --no-sort --reverse --tiebreak=index --toggle-sort=\` \
      --bind "ctrl-m:execute:
                echo '{}' | grep -o '[a-f0-9]\{7\}' | head -1 |
                xargs -I % sh -c 'git show --color=always % | delta --line-numbers'"
}

# Sync all projects with remote in the current directory
pullall() {
  # store the current dir
  CUR_DIR=$(pwd)

  # Let the person running the script know what\'s going on.
  echo "\n\033[1mPulling in latest changes for all repositories...\033[0m\n"

  # Find all git repositories and update it to the master latest revision
  for i in $(find . -name ".git" | cut -c 3-); do
      echo "";
      echo "\033[33m"+$i+"\033[0m";

      # We have to go to the .git parent directory to call the pull command
      cd "$i";
      cd ..;

      # finally pull
      git pull origin master;

      # lets get back to the CUR_DIR
      cd $CUR_DIR
  done

  echo "\n\033[32mComplete!\033[0m\n"
}


# Utilities

# Networking

alias ip="dig +short myip.opendns.com @resolver1.opendns.com"
alias dig="dig +nocmd any +multiline +noall +answer"

# preview csv files. source: http://stackoverflow.com/questions/1875305/command-line-csv-viewer
function csvpreview(){
      sed 's/,,/, ,/g;s/,,/, ,/g' "$@" | column -s, -t | less -#2 -N -S
}

# animated gifs from any video
function gify() {
  start=`date +%s`
  # Usage function, displays valid arguments
  usage() { echo "Usage: $0 [-f <fps, defaults to 15>] [-w <width, defaults to 640] inputfile" 1>&2; return 0; }

  # Default variables
  fps=15
  width=840

  # getopts to process the command line arguments
  while getopts ":f:w:" opt; do
      case "${opt}" in
          f) fps=${OPTARG};;
          w) width=${OPTARG};;
          *) usage && return;;
      esac
  done

  # shift out the arguments already processed with getopts
  shift "$((OPTIND - 1))"
  if (( $# == 0 )); then
      echo >&2 'Missing input file\n'
      usage >&2
      return
  fi

  # set input variable to the first option after the arguments
  input="$1"

  # Extract filename from input file without the extension
  filename=$(basename "$input")
  #extension="${filename##*.}"
  filename="${filename%.*}.gif"

  # Debug display to show what the script is using as inputs
  echo "Input: $#"
  echo "Output: $filename"
  echo "FPS: $fps"
  echo "Width: $width"

  # temporary file to store the first pass pallete
  palette="/tmp/palette.png"

  # options to pass to ffmpeg
  filters="fps=$fps,scale=$width:-1:flags=lanczos"

  # ffmpeg first pass
  ffmpeg -v error -i "$input" -vf "$filters,palettegen" -y $palette

  # ffmpeg second pass
  ffmpeg -v error -i "$input" -i $palette -lavfi "$filters [x]; [x][1:v] paletteuse=dither=bayer:bayer_scale=3" -y "$filename"

  end=`date +%s`
  runtime=$((end-start))

  # display output file size
  filesize=$(du -h "$filename" | cut -f1)
  echo "\nOutput File Name: $filename"
  echo "Output File Size: $filesize"
  echo "Time taken: $runtime seconds"
}
